# This Docker compose file spawns 3 services:
# 1. SQL instance (or MongoDB, depends on which one works better for Docker)
# 2. Web & Tunneling Server
# 3. The Crypto sign
# All of these containers' file systems are isolated from each other (and from the main PC) which is great

services:
  server:
    build:
      context: ./
      dockerfile: ./Site/Dockerfile
    environment:
      NODE_ENV: production
    secrets:
      - cert
      - server_privkey
      - server_privkey_pwd
    ports:
      - 443:443
      - 80:80

secrets:
  cert:
    file: ./Secrets/cert.pem
  server_privkey:
    file: ./Secrets/privKey.pem
  server_privkey_pwd:
    file: ./Secrets/privKeyPwd.txt

# The commented out section below is an example of how to define a PostgreSQL
# database that your application can use. `depends_on` tells Docker Compose to
# start the database before your application. The `db-data` volume persists the
# database data between container restarts. The `db-password` secret is used
# to set the database password. You must create `db/password.txt` and add
# a password of your choosing to it before running `docker-compose up`.
#     depends_on:
#       db:
#         condition: service_healthy
#   db:
#     image: postgres
#     restart: always
#     user: postgres
#     secrets:
#       - db-password
#     volumes:
#       - db-data:/var/lib/postgresql/data
#     environment:
#       - POSTGRES_DB=example
#       - POSTGRES_PASSWORD_FILE=/run/secrets/db-password
#     expose:
#       - 5432
#     healthcheck:
#       test: [ "CMD", "pg_isready" ]
#       interval: 10s
#       timeout: 5s
#       retries: 5
# volumes:
#   db-data:
# secrets:
#   db-password:
#     file: db/password.txt

